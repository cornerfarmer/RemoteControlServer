//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Wenn der Code neu generiert wird, gehen alle Änderungen an dieser Datei verloren
// </auto-generated>
//------------------------------------------------------------------------------
namespace RemoteControlServer.Listener
{
    using Definitions;
    using Ninject;
    using Ninject.Parameters;
    using RemoteControlServer;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Sockets;
    using System.Text;
    using System.Threading;
    public class Listener
	{
		public virtual IEnumerable<Session> runningSessions
		{
			get;
			set;
		}

		public virtual Client clients
		{
			get;
			set;
		}

		public virtual IClientService ClientService
		{
			get;
			set;
		}

        private TcpListener server;

        public virtual void run()
		{
            initializeServer();
            startServer();
            listen();
		}

        private void listen()
        {
            while (true)
            {
                Console.Write("Waiting for a connection... ");

                TcpClient client = waitForNewClient();
                startNewSessionThread(client);
            }
        }

        private TcpClient waitForNewClient()
        {
            return server.AcceptTcpClient();
        }

        private void initializeServer()
        {
            IPAddress localAddr = IPAddress.Parse("192.168.178.32");
            server = new TcpListener(localAddr, 10);
        }

        private void startServer()
        {
            server.Start();
        }

        private void startNewSessionThread(TcpClient client)
        {
            Thread myThread = new Thread(() =>
            {
                IKernel kernel = new StandardKernel(new Configurator());
                Session session = kernel.Get<Session>(new ConstructorArgument("tcpClient_", client));
                session.start();
            });
            myThread.Start();
        }
	}
}


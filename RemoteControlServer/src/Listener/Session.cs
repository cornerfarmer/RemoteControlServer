//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Wenn der Code neu generiert wird, gehen alle Änderungen an dieser Datei verloren
// </auto-generated>
//------------------------------------------------------------------------------
namespace RemoteControlServer.Listener
{
    using Definitions;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net.Sockets;
    using System.Text;

    public class Session
	{
		public virtual Client connectedClient
		{
			get;
			set;
		}

		public virtual IInputHandler inputHandler
		{
			get;
			set;
		}

		public virtual IOutputHandler outputHandler
		{
			get;
			set;
		}

        private TcpClient tcpClient;
        private Client client;
        private NetworkStream stream;
        private ILogger logger;

        public Session(TcpClient tcpClient_, IInputHandler inputHandler_, IOutputHandler outputHandler_, ILogger logger_)
        {
            tcpClient = tcpClient_;
            inputHandler = inputHandler_;
            outputHandler = outputHandler_;
            logger = logger_;
            client = new Client();
        }

		public virtual void start()
		{
            initializeStream();
            communicate();
            logger.log("Client has disconnected: " + tcpClient.Client.RemoteEndPoint);
            tcpClient.Close();
        }

        private void initializeStream()
        {
            stream = tcpClient.GetStream();
        }

        private void communicate()
        {
            try
            {
                while (true)
                {
                    String received = recieveAllData();
                    inputHandler.handleInput(received, client);
                    String dataToSend = outputHandler.getBufferedOutput();
                    sendData(dataToSend);
                }
            }
            catch (System.IO.IOException e)
            {

            }
        }

        private String recieveAllData()
        {
            Byte[] bytes = new Byte[256];
            String recievedData = "";
            do
            {
                int recievedBytesCount = stream.Read(bytes, 0, bytes.Length);
                recievedData += System.Text.Encoding.ASCII.GetString(bytes, 0, recievedBytesCount);
            }
            while (stream.DataAvailable);
            return recievedData;
        }

        private void sendData(String dataToSend)
        {
            byte[] msg = System.Text.Encoding.ASCII.GetBytes(dataToSend);
            stream.Write(msg, 0, msg.Length);
        }


	}
}


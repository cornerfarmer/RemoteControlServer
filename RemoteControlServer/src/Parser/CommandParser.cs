//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Wenn der Code neu generiert wird, gehen alle Änderungen an dieser Datei verloren
// </auto-generated>
//------------------------------------------------------------------------------
namespace RemoteControlServer.Parser
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
    using Definitions;

    public class CommandParser : ICommandParser
	{
        private string[] commandParts;
        private string commandString;

        public virtual Command parseCommand(string commandString_)
		{
            commandString = commandString_;
            validateCommandString();
            if (commandHasArguments())            
                return parseCommandWithArguments();
            else
                return parseCommandWithoutArguments();
        }

        private void validateCommandString()
        {
            if (commandString.Length == 0)
            {
                throw new ArgumentException("The given commandString is empty.");
            }
        }

        private bool commandHasArguments()
        {
            return commandString.Contains("|");
        }

        private Command parseCommandWithArguments()
        {
            computeCommandParts();
            return new Command(getNameOfCommandWithArguments(), getArgumentsOfCommandWithArguments());
        }

        private void computeCommandParts()
        {
            commandParts = commandString.Split('|');
            if (commandParts.Length != 2)
            {
                throw new ArgumentException("The command '" + commandString + "' contains more than one |.");
            }
        }

        private String getNameOfCommandWithArguments()
        {
            if (commandParts[0].Length == 0)
            {
                throw new ArgumentException("The given name of the given commandString '" + commandString + "' is empty.");
            }
            return commandParts[0];
        }

        private string[] getArgumentsOfCommandWithArguments()
        {
            string[] arguments = splitArgumentString();
            validateArguments(arguments);
            return arguments;
        }

        private string[] splitArgumentString()
        {
            if (commandParts[1].Contains(":"))
                return commandParts[1].Split(':');
            else if (commandParts[1].Length > 0)
                return new string[] { commandParts[1] };
            else
                return new string[0];
        }

        private void validateArguments(string[] arguments)
        {
            foreach (string argument in arguments)
            {
                if (argument.Length == 0)
                {
                    throw new ArgumentException("At least one argument of the given commandString '" + commandString + "' is empty.");
                }
            }
        }

        private Command parseCommandWithoutArguments()
        {
            return new Command(commandString);
        }
	}
}

